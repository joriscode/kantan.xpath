package kantan.xpath.laws.discipline

import kantan.xpath._
import kantan.xpath.ops._
import kantan.codecs.laws.CodecValue.{IllegalValue, LegalValue}
import kantan.codecs.laws.{IllegalString, LegalString}
import org.scalacheck.Arbitrary

trait ArbitraryArities {
  def asTextAttributes(atts: String*): Element = {
    val n = s"<element></element>".asUnsafeNode.getFirstChild.asInstanceOf[Element]
    atts.zipWithIndex.foreach { case (att, i) => n.setAttribute(s"field${i + 1}", att) }
    n
  }

  [#implicit def arbLegalTuple1[[#A1#]](implicit [#a1: Arbitrary[LegalString[A1]]#]): Arbitrary[LegalNode[Tuple1[[#A1#]]]] =
    Arbitrary {
      for {
        [#v1 <- Arbitrary.arbitrary[LegalString[A1]]#
        ]
      } yield LegalValue(Option(asTextAttributes([#v1.encoded#])), Tuple1([#v1.decoded#]))
    }

  implicit def arbIllegalTuple1[[#A1#]](implicit [#a1: Arbitrary[IllegalString[A1]]#]): Arbitrary[IllegalNode[Tuple1[[#A1#]]]] =
    Arbitrary {
      for {
        [#v1 <- Arbitrary.arbitrary[IllegalString[A1]]#
        ]
      } yield IllegalValue(Option(asTextAttributes([#v1.encoded#])))
    }#
  ]
}