/*
 * Copyright 2016 Nicolas Rinaudo
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package kantan.xpath
package laws
package discipline

import ops._
import kantan.codecs.laws.CodecValue.{IllegalValue, LegalValue}
import kantan.codecs.laws.{IllegalString, LegalString}
import org.scalacheck.Arbitrary

trait ArbitraryArities {
  @SuppressWarnings(Array("org.wartremover.warts.AsInstanceOf", "org.wartremover.warts.StringPlusAny"))
  def asTextAttributes(atts: String*): Element = {
    val n = s"<element></element>".asUnsafeNode.getFirstChild.asInstanceOf[Element]
    atts.zipWithIndex.foreach { case (att, i) => n.setAttribute(s"field${i + 1}", att) }
    n
  }

  [#implicit def arbLegalTuple1[[#A1#]](implicit [#a1: Arbitrary[LegalString[A1]]#]): Arbitrary[LegalNode[Tuple1[[#A1#]]]] =
    Arbitrary {
      for {
        [#v1 <- Arbitrary.arbitrary[LegalString[A1]]#
        ]
      } yield LegalValue(Option(asTextAttributes([#v1.encoded#])), Tuple1([#v1.decoded#]))
    }

  implicit def arbIllegalTuple1[[#A1#]](implicit [#a1: Arbitrary[IllegalString[A1]]#]): Arbitrary[IllegalNode[Tuple1[[#A1#]]]] =
    Arbitrary {
      for {
        [#v1 <- Arbitrary.arbitrary[IllegalString[A1]]#
        ]
      } yield IllegalValue(Option(asTextAttributes([#v1.encoded#])))
    }#
  ]
}
