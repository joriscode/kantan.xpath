/*
 * Copyright 2017 Nicolas Rinaudo
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package kantan.xpath

trait GeneratedDecoders {
  [#def decoder[[#I1#], O]([#x1: Query[DecodeResult[I1]]#])(f: ([#I1#]) ⇒ O): NodeDecoder[O] = NodeDecoder.fromFound { n ⇒
      for {
        [#i1 ← x1.eval(n)#
        ]
      } yield f([#i1#])
    }#
  ]

  [#def decoder[[#I1: Compiler#], O]([#x1: XPathExpression#])(f: ([#I1#]) ⇒ O): NodeDecoder[O] =
    decoder([#Compiler[I1].compile(x1)#])(f)#

  ]

  [#def tuple[[#I1#]]([#x1: Query[DecodeResult[I1]]#]): NodeDecoder[Tuple1[[#I1#]]] =
    decoder([#x1#])(Tuple1.apply)#

  ]

  [#def tuple[[#I1: Compiler#]]([#x1: XPathExpression#]): NodeDecoder[Tuple1[[#I1#]]] =
    decoder([#x1#])(([#i1: I1#]) ⇒ Tuple1([#i1#]))#

  ]
}
